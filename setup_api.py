#!/usr/bin/env python3
"""
Setup script for configuring OpenAI API key
"""

import os
import sys
from pathlib import Path
import getpass


def setup_openai_api():
    """Interactive setup for OpenAI API key"""
    
    print("=" * 60)
    print("OpenAI API Setup for Genealogy Text Processor")
    print("=" * 60)
    print()
    
    # Check if API key already exists
    existing_key = os.getenv('OPENAI_API_KEY')
    if existing_key:
        print("[OK] API key already configured in environment")
        print(f"  Key starts with: {existing_key[:15]}...")
        response = input("\nDo you want to update it? (y/n): ").lower()
        if response != 'y':
            print("Setup complete!")
            return
    
    # Guide user to get API key
    print("To get an OpenAI API key:")
    print("1. Go to: https://platform.openai.com/api-keys")
    print("2. Sign in or create an OpenAI account")
    print("3. Click 'Create new secret key'")
    print("4. Copy the generated key (starts with 'sk-')")
    print()
    
    # Get API key from user
    api_key = getpass.getpass("Enter your OpenAI API key: ").strip()
    
    if not api_key:
        print("No API key provided. Exiting.")
        return
    
    if not api_key.startswith('sk-'):
        print("Warning: OpenAI API keys usually start with 'sk-'")
        response = input("Continue anyway? (y/n): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Choose storage method
    print("\nHow would you like to store the API key?")
    print("1. Create .env file (recommended for development)")
    print("2. Show command to set environment variable")
    print("3. Both")
    
    choice = input("\nEnter choice (1-3): ").strip()
    
    if choice in ['1', '3']:
        # Create .env file
        env_file = Path('.env')
        
        # Check if .env already exists
        if env_file.exists():
            response = input("\n.env file already exists. Overwrite? (y/n): ").lower()
            if response != 'y':
                print("Skipping .env file creation.")
            else:
                create_env_file(api_key)
        else:
            create_env_file(api_key)
    
    if choice in ['2', '3']:
        # Show environment variable commands
        print("\n" + "=" * 60)
        print("To set environment variable manually:")
        print("=" * 60)
        
        if sys.platform == 'win32':
            print("\nWindows Command Prompt:")
            print(f"set OPENAI_API_KEY={api_key}")
            print("\nWindows PowerShell:")
            print(f'$env:OPENAI_API_KEY="{api_key}"')
        else:
            print("\nLinux/Mac:")
            print(f"export OPENAI_API_KEY={api_key}")
            print("\nTo make it permanent, add to ~/.bashrc or ~/.zshrc")
    
    # Test the API key
    print("\n" + "=" * 60)
    response = input("Would you like to test the API key now? (y/n): ").lower()
    if response == 'y':
        test_api_key(api_key)
    
    print("\n[OK] Setup complete!")
    print("\nYou can now run the pipeline with:")
    print("  python run_pipeline.py")


def create_env_file(api_key):
    """Create .env file with API key"""
    env_content = f"""# OpenAI API Configuration
# Generated by setup_api.py

# Your OpenAI API key from https://platform.openai.com/api-keys
OPENAI_API_KEY={api_key}

# Optional: Override model settings
# GENEALOGY_MODEL=gpt-4o-mini  # Options: gpt-4o-mini, gpt-3.5-turbo, gpt-4o
# GENEALOGY_TEMPERATURE=0.2  # Range: 0.0-2.0 (lower = more deterministic)

# Optional: Override other settings
# GENEALOGY_LOG_LEVEL=INFO
# GENEALOGY_CHUNK_SIZE=20
# GENEALOGY_CONTEXT_SIZE=10
"""
    
    env_file = Path('.env')
    env_file.write_text(env_content)
    print(f"\n[OK] Created .env file with API key")
    print(f"  File: {env_file.absolute()}")


def test_api_key(api_key):
    """Test if the API key works"""
    print("\nTesting API key...")
    
    try:
        from openai import OpenAI
        
        # Create client with the API key
        client = OpenAI(api_key=api_key)
        
        # Send a simple test prompt
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "Say 'API key is working!' in exactly 4 words."}
            ],
            max_tokens=10,
            temperature=0
        )
        
        print("[OK] API key is valid and working!")
        print(f"  Test response: {response.choices[0].message.content}")
        print(f"  Model used: {response.model}")
        
    except ImportError:
        print("âš  openai package not installed")
        print("  Install with: pip install openai")
        
    except Exception as e:
        print(f"[ERROR] API key test failed: {e}")
        print("\nPossible issues:")
        print("- Invalid API key")
        print("- Insufficient API credits")
        print("- Network connectivity issues")
        print("- API rate limits")


if __name__ == "__main__":
    setup_openai_api()